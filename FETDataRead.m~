function [data, path2File] = FETDataRead(path2File)
% Sam Schott
% FETDataRead reads data from a text file with FET transfer or output
% characteristics
%   The function reads the delimited data stored in the file and saves it
%   in an output matrix. It also performs several checks to confirm that
%   the file contains transfer characteristics in the linear and saturation
%   regime.
%
%   INPUT:
%   Path2File - full path to file with data, user is prompted to select a
%   file if not given
%
%   OUTPUT:
%   data.type - string specifying type of data (transfer or output)
%   data.x - vector containing x-axis data (gate or drain voltage)
%   data.Is - matrix containing source current data
%   data.Id - matrix containing drain current data
%   data.Ig - matrix containing gate current data
%   data.Vstep - vector containing the drain or gate voltage steps
%   data.DataMatrix - matric containing the raw data from file
%
%   Sam Schott, 06.10.2017
%   ss2151@cam.ac.uk
%%

global path

V_DRAIN_IDENTIFIERS = {'Vd', 'Drain voltage'};
V_GATE_IDENTIFIERS = {'Vg', 'Gate voltage'};

I_SOURCE_IDENTIFIERS = {'Is', 'source', 'Source current'};
I_DRAIN_IDENTIFIERS = {'Id', 'Isd', 'Drain current'};
I_GATE_IDENTIFIERS = {'Ig', 'Gate current'};

if nargin==0
    [fileName, pathName] = uigetfile([path, '*.txt'], 'Select file');
    path2File = fullfile(pathName, fileName);
    % output empty matrix if no file is selected
    if fileName == 0
        data = [];
        return;
    end
    path = pathName;
end

S = importdata(path2File);

% save raw data to output structure
data.DataMatrix = S.data;

% check if data is from output or transfer curve
if isinstring(S.colheaders{1}, V_DRAIN_IDENTIFIERS)
    data.type = 'output';
elseif isinstring(S.colheaders{1}, V_GATE_IDENTIFIERS)
    data.type = 'transfer';
else
    error('Data has a unknown format. Please check if you have selected the right file.');
end

% save x-axis data to output structure
data.x = data.DataMatrix(:, 1);

% determine number of columns
ncol = length(data.DataMatrix(1, :));

% check if source and drain current were recorded spererately or together
check = isinstring(S.colheaders(2:end), I_SOURCE_IDENTIFIERS);
if not check
    dataFormat = {'Is','Id','Ig'};
    nStep = (ncol - 1)/3;
elseif check
    dataFormat = {'Id';'Ig'};
    nStep = (ncol - 1)/2;
else
    Error('The data file is imcomplete. Please check the format of your data');
end

% extract data to ouput structure
for i = 1:length(dataFormat)
    data.(dataFormat{i}) = data.DataMatrix(:, (2+(i-1)*nStep):(1+i*nStep));
end

% determine stepped voltage values and save as vector
for i = 2:(1+nStep)
    str = S.colheaders{i};
    try
        data.Vstep(i-1) = str2double(regexp(str, '(\d+(\.\d+)*)', 'match'));
    catch
        data.Vstep(i-1) = 't'; % trailing gate voltage
    end
    % check if drain voltage is positive or negative
    if strfind(str, '-') ~= 0
        data.Vstep(i-1) = -data.Vstep(i-1);
    end
end

end

function contains = isinstring(string, string_list)
% ISINSTRING checks any entry in string_list can be found in string.
%
% INPUT:
% string - string to search
% string_list - cell array of strings / chr to search for in string
%
% OUTPUT:
% true if string can be found, false otherwise

if isstring(string_list)
    string_list = {}
if ~iscellstr(string_list)
    error('"string_list" must be "chr array".')
end

if iscellstr(string)
    n = length(string);
elseif isstring(string)
    n = 1;
else
    error('"string" must be of type "chr array" or "str".')
end

contains = zeros(1, n);

for search_string = string_list
    find = strfind(string, search_string, 'ForceCellOutput', true);
    for i = 1:n
        if isempty(find{i})
            contains(i) = 0;
        else
            contains(i) = find{i};
        end
    end
    if sum(contains) > 0
        break
    end
end

contains = logical(contains);

end    

